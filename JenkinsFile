#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'

  stage('Setup') {
    deleteDir()
    // github is open gitlab requires credentials to clone
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

  def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)

  stage('Archive') {
    sh """
      ${mvn}/bin/mvn clean package -U -Dmaven.repo.local=${root}
      cp ${root}/target/pz-search-query-1.0.0.jar ${root}/pz-search-query.jar
    """
   sh """mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${root}/pz-search-query.jar \
      -DrepositoryId=nexus \
      -Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
      -DgroupId="org.piazza" \
      -DgeneratePom=false \
      -Dpackaging=jar \
      -Dmaven.repo.local="${root}/.m2/repository" \
      -DartifactId=pz-search-query \
      -Dversion=${appvers}
    """
  }

  stage('Scans') {
    withCredentials([[$class: "StringBinding", credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]]) {
      sh "/jslave/dependency-check/dependency-check/bin/dependency-check.sh --version"
      sh '/jslave/dependency-check/dependency-check/bin/dependency-check.sh --project "pz-search-query" --scan "." --format "XML" --enableExperimental --disableBundleAudit'
      sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
      //ionConnect()
      //sh """
      //  mkdir -p ${root}/.m2/repository
      //  ${mvn}/bin/mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install \
      //    -Dmaven.repo.local=${root}/.m2/repository \
      //    -Pcoverage-per-test org.jacoco:jacoco-maven-plugin:report \
      //    -DdataFile=target/jacoco.exec
      //"""

      sh """
        mkdir -p ${root}/.m2/repository
        ${mvn}/bin/mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install \
          -Dmaven.repo.local=${root}/.m2/repository \
          -Pcoverage-per-test org.jacoco:jacoco-maven-plugin:report \
          -DdataFile=target/jacoco.exec
      """

      sh """
        sonar-scanner -Dsonar.jacoco.reportPath=target/jacoco.exec \
        -Dsonar.binaries=target/classes \
        -Dsonar.language=java \
        -Dsonar.links.scm=${env.GIT_URL} \
        -Dsonar.links.scm_dev=${env.GIT_URL}.git \
        -Dsonar.links.issue= \
        -Dsonar.links.homepage= \
        -Dsonar.links.ci=${env.JOB_URL} \
        -Dsonar.projectKey=venicegeo:piazza:${artifactId} \
        -Dsonar.projectName=venicegeo:piazza:${artifactId} \
        -Dsonar.projectBaseDir=${root} \
        -Dsonar.projectVersion=${appvers} \
        -Dsonar.redmine.url= \
        -Dsonar.redmine.api-search-query-key= \
        -Dsonar.redmine.project-key= \
        -Dsonar.sourceEncoding=utf-8 \
        -Dsonar.sources=src/main/java \
        -Dsonar.exclusions= \
        -Dsonar.tests=src/test/java
      """

      //sh "${mvn}/bin/mvn install:install-file -Dmaven.repo.local=${root} -Dfile=pom.xml -DpomFile=pom.xml"
      sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} src/main/java/{*.java,**/*.java}"
      sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
      sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
    }
  }

}
